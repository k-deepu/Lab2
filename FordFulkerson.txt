import java.util.*;

public class FordFulkerson {
    // Function to perform BFS and find an augmenting path
    static boolean bfs(int[][] residualGraph, int source, int sink, int[] parent) {
        int n = residualGraph.length;
        boolean[] visited = new boolean[n];
        Queue<Integer> queue = new LinkedList<>();
        
        queue.add(source);
        visited[source] = true;
        parent[source] = -1;

        while (!queue.isEmpty()) {
            int u = queue.poll();

            for (int v = 0; v < n; v++) {
                if (!visited[v] && residualGraph[u][v] > 0) {
                    queue.add(v);
                    visited[v] = true;
                    parent[v] = u;

                    if (v == sink) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    // Function to calculate maximum flow using Ford-Fulkerson algorithm
    static int fordFulkerson(int[][] graph, int source, int sink) {
        int n = graph.length;

        // Create a residual graph and initialize it to the original graph
        int[][] residualGraph = new int[n][n];
        for (int u = 0; u < n; u++) {
            System.arraycopy(graph[u], 0, residualGraph[u], 0, n);
        }

        int[] parent = new int[n];  // Array to store the path
        int maxFlow = 0;           // Initialize maximum flow to 0

        // Augment the flow while there is a path from source to sink
        while (bfs(residualGraph, source, sink, parent)) {
            // Find the minimum residual capacity in the path filled by BFS
            int pathFlow = Integer.MAX_VALUE;
            for (int v = sink; v != source; v = parent[v]) {
                int u = parent[v];
                pathFlow = Math.min(pathFlow, residualGraph[u][v]);
            }

            // Update the residual capacities of the edges and reverse edges
            for (int v = sink; v != source; v = parent[v]) {
                int u = parent[v];
                residualGraph[u][v] -= pathFlow;
                residualGraph[v][u] += pathFlow;
            }

            // Add the path flow to the overall flow
            maxFlow += pathFlow;
        }

        return maxFlow;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the number of vertices: ");
        int vertices = sc.nextInt();
        int[][] graph = new int[vertices][vertices];

        System.out.print("Enter the number of edges: ");
        int edges = sc.nextInt();

        System.out.println("Enter the edges (from, to, capacity):");
        for (int i = 0; i < edges; i++) {
            int from = sc.nextInt();
            int to = sc.nextInt();
            int capacity = sc.nextInt();
            graph[from][to] = capacity;
        }

        System.out.print("Enter the source vertex: ");
        int source = sc.nextInt();
        System.out.print("Enter the sink vertex: ");
        int sink = sc.nextInt();

        int maxFlow = fordFulkerson(graph, source, sink);
        System.out.println("The maximum possible flow is: " + maxFlow);

        sc.close();
    }
}
