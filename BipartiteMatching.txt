import java.util.*;

public class BipartiteMatching {

    // Function to perform DFS and find augmenting path
    static boolean bpm(int[][] graph, int u, boolean[] seen, int[] matchR) {
        // Try to find a match for vertex u in U
        for (int v = 0; v < graph.length; v++) {
            // If vertex u is connected to v and v is not already seen in the current iteration
            if (graph[u][v] == 1 && !seen[v]) {
                seen[v] = true;  // Mark vertex v as seen

                // If v is not matched or the previous match for v can find an alternate match
                if (matchR[v] == -1 || bpm(graph, matchR[v], seen, matchR)) {
                    matchR[v] = u;  // Match v with u
                    return true;
                }
            }
        }
        return false;
    }

    // Function to find the maximum bipartite matching
    static int maxBPM(int[][] graph) {
        // Array to store the match for each vertex in V (initially all are unmatched)
        int[] matchR = new int[graph.length];
        Arrays.fill(matchR, -1);

        int result = 0;  // Initialize the result (number of matches)

        // Try to find a match for every vertex in U
        for (int u = 0; u < graph.length; u++) {
            // Mark all vertices as not seen for the current vertex u
            boolean[] seen = new boolean[graph.length];
            if (bpm(graph, u, seen, matchR)) {
                result++;  // If an augmenting path is found, increase the result
            }
        }

        return result;  // Return the maximum bipartite matching size
    }

    // Main function to test the algorithm
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input the number of vertices in the two sets U and V
        System.out.print("Enter the number of vertices in set U: ");
        int m = scanner.nextInt();  // Size of U
        System.out.print("Enter the number of vertices in set V: ");
        int n = scanner.nextInt();  // Size of V

        // Input the adjacency matrix for the bipartite graph
        System.out.println("Enter the adjacency matrix (1 for edge, 0 for no edge): ");
        int[][] graph = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                graph[i][j] = scanner.nextInt();
            }
        }

        // Calculate and print the maximum matching
        int maxMatching = maxBPM(graph);
        System.out.println("Maximum Bipartite Matching: " + maxMatching);

        scanner.close();
    }
}


/*
Enter the number of vertices in set U: 4
Enter the number of vertices in set V: 4
Enter the adjacency matrix (1 for edge, 0 for no edge):
1 0 1 0
1 1 0 1
0 1 1 1
1 1 1 0
*/