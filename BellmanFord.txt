import java.util.*;

public class BellmanFord {
    static void bellmanFord(int graph[][], int V, int src) {
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;
        
        for (int i = 0; i < V - 1; i++) {
            for (int u = 0; u < V; u++) {
                for (int v = 0; v < V; v++) {
                    if (graph[u][v] != 0 && dist[u] != Integer.MAX_VALUE) {
                        dist[v] = Math.min(dist[v], dist[u] + graph[u][v]);
                    }
                }
            }
        }

        for (int u = 0; u < V; u++) {
            for (int v = 0; v < V; v++) {
                if (graph[u][v] != 0 && dist[u] != Integer.MAX_VALUE && dist[u] + graph[u][v] < dist[v]) {
                    System.out.println("Graph contains negative weight cycle");
                    return;
                }
            }
      }
        
        for (int i = 0; i < V; i++) {
            System.out.println("Distance of source " + (src + 1) + " to " + (i + 1) + " is " + dist[i]);
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of vertices\n");
        int V = sc.nextInt();
        int[][] graph = new int[V][V];
        System.out.println("Enter the adjacency matrix");
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                graph[i][j] = sc.nextInt();
            }
        }
        System.out.print("Enter the source vertex\n");
        int src = sc.nextInt() - 1;
        bellmanFord(graph, V, src);
    }
}


/*
Enter the number of vertices
4
Enter the adjacency matrix
0 1 4 0
0 0 0 2
0 0 0 3
0 0 0 0
Enter the source vertex
1
Distance of source 1 to 1 is 0
Distance of source 1 to 2 is 1
Distance of source 1 to 3 is 4
Distance of source 1 to 4 is 3 */