import java.util.*;

public class Dag {
    static class Edge {
        int to, weight;

        Edge(int to, int weight) {
            this.to = to;
            this.weight = weight;
        }
    }

    // Perform a topological sort using DFS
    static void topologicalSort(int node, boolean[] visited, Stack<Integer> stack, List<List<Edge>> adj) {
        visited[node] = true;
        for (Edge edge : adj.get(node)) {
            if (!visited[edge.to]) {
                topologicalSort(edge.to, visited, stack, adj);
            }
        }
        stack.push(node);
    }

    // Find the shortest path in a DAG using DP
    static int[] shortestPathDAG(int vertices, List<List<Edge>> adj, int source) {
        Stack<Integer> stack = new Stack<>();
        boolean[] visited = new boolean[vertices];

        // Topological sort
        for (int i = 0; i < vertices; i++) {
            if (!visited[i]) {
                topologicalSort(i, visited, stack, adj);
            }
        }

        // Initialize distances to infinity
        int[] dist = new int[vertices];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[source] = 0;

        // Process vertices in topological order
        while (!stack.isEmpty()) {
            int u = stack.pop();

            if (dist[u] != Integer.MAX_VALUE) {
                for (Edge edge : adj.get(u)) {
                    if (dist[u] + edge.weight < dist[edge.to]) {
                        dist[edge.to] = dist[u] + edge.weight;
                    }
                }
            }
        }

        return dist;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the number of vertices: ");
        int vertices = sc.nextInt();
        System.out.print("Enter the number of edges: ");
        int edges = sc.nextInt();

        // Create adjacency list
        List<List<Edge>> adj = new ArrayList<>();
        for (int i = 0; i < vertices; i++) {
            adj.add(new ArrayList<>());
        }

        System.out.println("Enter edges (from to weight):");
        for (int i = 0; i < edges; i++) {
            int from = sc.nextInt();
            int to = sc.nextInt();
            int weight = sc.nextInt();
            adj.get(from).add(new Edge(to, weight));
        }

        System.out.print("Enter the source vertex: ");
        int source = sc.nextInt();

        int[] shortestPaths = shortestPathDAG(vertices, adj, source);

        System.out.println("Shortest paths from source " + source + ":");
        for (int i = 0; i < vertices; i++) {
            if (shortestPaths[i] == Integer.MAX_VALUE) {
                System.out.println("Vertex " + i + " is unreachable");
            } else {
                System.out.println("Vertex " + i + ": " + shortestPaths[i]);
            }
        }

        sc.close();
    }
}
